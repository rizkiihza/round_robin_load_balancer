// Code generated by MockGen. DO NOT EDIT.
// Source: services/healthcheck/healthcheck.go

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthcheck is a mock of Healthcheck interface.
type MockHealthcheck struct {
	ctrl     *gomock.Controller
	recorder *MockHealthcheckMockRecorder
}

// MockHealthcheckMockRecorder is the mock recorder for MockHealthcheck.
type MockHealthcheckMockRecorder struct {
	mock *MockHealthcheck
}

// NewMockHealthcheck creates a new mock instance.
func NewMockHealthcheck(ctrl *gomock.Controller) *MockHealthcheck {
	mock := &MockHealthcheck{ctrl: ctrl}
	mock.recorder = &MockHealthcheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthcheck) EXPECT() *MockHealthcheckMockRecorder {
	return m.recorder
}

// GetHealthyServiceKeys mocks base method.
func (m *MockHealthcheck) GetHealthyServiceKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthyServiceKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetHealthyServiceKeys indicates an expected call of GetHealthyServiceKeys.
func (mr *MockHealthcheckMockRecorder) GetHealthyServiceKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthyServiceKeys", reflect.TypeOf((*MockHealthcheck)(nil).GetHealthyServiceKeys))
}

// PeriodicalCheck mocks base method.
func (m *MockHealthcheck) PeriodicalCheck(done <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeriodicalCheck", done)
}

// PeriodicalCheck indicates an expected call of PeriodicalCheck.
func (mr *MockHealthcheckMockRecorder) PeriodicalCheck(done interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeriodicalCheck", reflect.TypeOf((*MockHealthcheck)(nil).PeriodicalCheck), done)
}
