// Code generated by MockGen. DO NOT EDIT.
// Source: clients/application_service_client.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	model "loadbalancer/model"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApplicationServiceClient is a mock of ApplicationServiceClient interface.
type MockApplicationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceClientMockRecorder
}

// MockApplicationServiceClientMockRecorder is the mock recorder for MockApplicationServiceClient.
type MockApplicationServiceClientMockRecorder struct {
	mock *MockApplicationServiceClient
}

// NewMockApplicationServiceClient creates a new mock instance.
func NewMockApplicationServiceClient(ctrl *gomock.Controller) *MockApplicationServiceClient {
	mock := &MockApplicationServiceClient{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationServiceClient) EXPECT() *MockApplicationServiceClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockApplicationServiceClient) Call(ctx context.Context, request *http.Request, appService *model.ApplicationServiceAddress) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, request, appService)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockApplicationServiceClientMockRecorder) Call(ctx, request, appService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockApplicationServiceClient)(nil).Call), ctx, request, appService)
}

// Ping mocks base method.
func (m *MockApplicationServiceClient) Ping(ctx context.Context, appService *model.ApplicationServiceAddress) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, appService)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockApplicationServiceClientMockRecorder) Ping(ctx, appService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockApplicationServiceClient)(nil).Ping), ctx, appService)
}
